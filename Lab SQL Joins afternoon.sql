-- https://github.com/Nyobanne/lab-sql-joins
use sakila;
#SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); # in case of grouping error

-- List the number of films per category.
SELECT c.name, fc.category_id, count(f.film_id)
FROM film_category fc 
JOIN category c 
ON fc.category_id=c.category_id
JOIN film f 
ON fc.film_id=f.film_id
GROUP BY fc.category_id;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id, a.address_id, c.city, c2.country
FROM store s 
JOIN address a 
ON s.address_id=a.address_id
JOIN city c 
ON a.city_id=c.city_id
JOIN country c2 
ON c.country_id=c2.country_id ;

-- Calculate the total revenue generated by each store in dollars. #both stores made $67k
SELECT s.store_id, sum( p.amount)
FROM staff s 
JOIN payment p 
USING (staff_id)
GROUP BY store_id;

-- Determine the average running time of films for each category.
SELECT AVG(f.length), c.name
FROM film f 
JOIN film_category fc ON f.film_id=fc.film_id 
JOIN category c ON fc.category_id=c.category_id 
GROUP BY name;

-- BONUS--
-- Identify the film categories with the longest average running time.
SELECT AVG(f.length), c.name
FROM film f 
JOIN film_category fc ON f.film_id=fc.film_id 
JOIN category c ON fc.category_id=c.category_id 
GROUP BY name
ORDER BY LENGTH DESC
LIMIT 3;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id)
FROM film f 
JOIN inventory i 
USING (film_id)
JOIN rental r 
USING (inventory_id)
GROUP BY title
ORDER BY COUNT(r.rental_id) DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1. #can be rented 4 times from store 1
#either where or case
SELECT store.store_id
CASE
	WHEN f.title="Academy dinosaur"=1 THEN "Academy dinosaur"
	ELSE "other film"
END
FROM store s 
JOIN inventory i 
USING(film_id);


-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
#Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, 
#and this information can be obtained using a CASE statement combined with IFNULL."

SELECT distinct f.title,
CASE
	WHEN i.film_id in (f.film_id) 
	then "available"
	else "n/a"
END as "availability"
FROM film f 
LEFT JOIN inventory i #there's more id in film than in inventory
USING (film_id);


